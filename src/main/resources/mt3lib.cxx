// MT3 runtime library implemented in C++

#include <stdlib.h>
#include <stdio.h>
#include <vector>
#include <string>

#include "util.h"

class GCObject {
    GCObject* next = nullptr;
    bool mark = false;

public:
    void set_mark() { mark = true; }

    /// Implementors are expected to call this->set_mark() and visit() on all GCObject-s in fields
    virtual void visit() {
        set_mark();
    }

    virtual ~GCObject() {
    };
};

const u8 INT_TAG = 1;
const u8 ARRAY_TAG = 2;
const u8 STRING_TAG = 3;
const u8 OBJECT_TAG = 4;
struct MT3Value : public GCObject {
    MT3Value(u8 tag) : tag(tag) {}

    u8 tag;
};
struct MT3Int : public MT3Value {
    MT3Int(u64 value) : MT3Value(INT_TAG), value(value) {}

    u64 value;
};
struct MT3Array : public MT3Value {
    std::vector<MT3Value*> values;

    MT3Array(std::vector<MT3Value*>&& values) : MT3Value(ARRAY_TAG), values(values) {}

    void visit() override {
        set_mark();
        for (const auto& x : values)
            x->visit();
    }
};
struct MT3String : public MT3Value {
    std::string data;

    MT3String(std::string&& data) : MT3Value(STRING_TAG), data(data) {}
};

[[noreturn]]
extern "C" void panic(const char* message) {
    printf("%s", message);
    exit(1);
}

template<typename T, typename... Args>
T* gc_malloc(Args... args) {
    return new T(args...);
//     return static_cast<T*>(malloc(sizeof(T)));
}

// MT3Value newString(char*) {
//     MT3Int* result = gc_malloc(sizeof(MT3Array));
// }

// operator+
extern "C" MT3Value* mt3_plus(MT3Value* a, MT3Value* b) {
    if (a->tag == INT_TAG && b->tag == INT_TAG) {
        u64 sum = static_cast<MT3Int*>(a)->value + static_cast<MT3Int*>(b)->value;
        return static_cast<MT3Value*>(gc_malloc<MT3Int>(sum));
    } else if (a->tag == STRING_TAG && b->tag == STRING_TAG) {
        MT3String* result = gc_malloc<MT3String>("");
        result->data += static_cast<MT3String*>(a)->data;
        result->data += static_cast<MT3String*>(b)->data;
        return result;
    }
    panic("Unsupported types for operator_plus");
}

// Guest main function generated by the mt3 compiler using LLVM
// MT3Value mt3_main();

// This function is called from start.o or whatever
int main() {
//     mt3_main();
}